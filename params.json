{"name":"PHP Quandl","tagline":"Easy access to the Quandl Data API using PHP.","body":"Quandl Elephant API\r\n===================\r\n\r\nThis project is a fork of [php-quandl](https://github.com/DannyBen/php-quandl), a great API to provide easy access to the \r\n[Quandl API](https://www.quandl.com/help/api) using PHP.\r\n\r\nThe name of this project was changed to answer the [PHP Licensing](http://php.net/license/).\r\n\r\n[![Build Status](https://travis-ci.org/royopa/quandl-elephant-api.svg?branch=master)](https://travis-ci.org/royopa/quandl-elephant-api)\r\n[![Latest Stable Version](https://poser.pugx.org/royopa/quandl-elephant-api/v/stable)](https://packagist.org/packages/royopa/quandl-elephant-api) [![Total Downloads](https://poser.pugx.org/royopa/quandl-elephant-api/downloads)](https://packagist.org/packages/royopa/quandl-elephant-api) [![Latest Unstable Version](https://poser.pugx.org/royopa/quandl-elephant-api/v/unstable)](https://packagist.org/packages/royopa/quandl-elephant-api) [![License](https://poser.pugx.org/royopa/quandl-elephant-api/license)](https://packagist.org/packages/royopa/quandl-elephant-api)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/royopa/quandl-elephant-api/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/royopa/quandl-elephant-api/?branch=master)\r\n[![Code Climate](https://codeclimate.com/github/royopa/quandl-elephant-api/badges/gpa.svg)](https://codeclimate.com/github/royopa/quandl-elephant-api)\r\n\r\nInstall\r\n-------\r\n\r\nTo install with composer:\r\n\r\n```sh\r\ncomposer require royopa/quandl-elephant-api\r\n```\r\n\r\nExamples\r\n--------\r\n\r\nThis is a basic call. It will return a PHP object with price\r\ndata for AAPL:\r\n\r\n```php\r\nuse Royopa\\Quandl;\r\n\r\n$api_key = \"YOUR_KEY_HERE\";\r\n$quandl  = new Quandl($api_key);\r\n$data    = $quandl->getSymbol(\"GOOG/NASDAQ_AAPL\");\r\n```\r\n\r\nYou may pass any parameter that is mentioned in the Quandl\r\ndocumentation:\r\n\r\n```php\r\nuse Royopa\\Quandl;\r\n\r\n$quandl = new Quandl($api_key);\r\n$data = $quandl->getSymbol($symbol, [\r\n\t\"sort_order\"      => \"desc\",\r\n\t\"exclude_headers\" => true,\r\n\t\"rows\"            => 10,\r\n\t\"column\"          => 4, \r\n]);\r\n```\r\n\r\nThe date range options get a special treatment. You may use\r\nany date string that PHP's `strtotime()` understands.\r\n\r\n```php\r\nuse Royopa\\Quandl;\r\n\r\n$quandl = new Quandl($api_key, \"csv\");\r\n$data = $quandl->getSymbol($symbol, [\r\n\t\"trim_start\" => \"today-30 days\",\r\n\t\"trim_end\"   => \"today\",\r\n]);\r\n```\r\n\r\nYou can also search the entire Quandl database and get a list of\r\nsupported symbols in a data source:\r\n\r\n```php\r\nuse Royopa\\Quandl;\r\n\r\n$quandl = new Quandl($api_key);\r\n$data   = $quandl->getSearch(\"crude oil\");\r\n$data   = $quandl->getList(\"WIKI\", 1, 10);\r\n```\r\n\r\nMore examples can be found in the [examples.php](https://github.com/DannyBen/php-quandl/blob/master/examples.php) file \r\n\r\nCaching\r\n-------\r\n\r\nYou may provide the `quandl` object with a cache handler function.\r\nThis function should be responsible for both reading from your cache and storing to it. \r\n\r\nSee the [example_cache.php](https://github.com/DannyBen/php-quandl/blob/master/example_cache.php) file.\r\n\r\n\r\nReference\r\n---------\r\n\r\n### Constructor and public properties\r\n\r\nThe constructor accepts two optional parameters: `$api_key` and `$format`:\r\n\r\n```php\r\n$quandl = new Quandl(\"YOUR KEY\", \"csv\");\r\n```\r\n\r\nYou may also set these properties later:\r\n\r\n```php\r\n$quandl->api_key = \"YOUR KEY\";\r\n$quandl->format  = \"json\";\r\n```\r\n\r\n`$format` can be one of `csv`, `xml`, `json`, and `object` (which will return a php object obtained with `json_decode()`).\r\n\r\nAfter each call to Quandl, the property `$last_url` will be set \r\nfor debugging and other purposes. In case there was an error getting\r\nthe data from Quandl, the result will be `false` and the property \r\n`$error` will contain the error message.\r\n\r\n\r\n### getSymbol\r\n\r\n```php\r\nmixed getSymbol( string $symbol [, array $params ] )\r\n```\r\n\r\nReturns an object containing data for a given symbol. The format\r\nof the result depends on the value of `$quandl->format`.\r\n\r\nThe optional parameters array is an associative `key => value`\r\narray with any of the parameters supported by Quandl.\r\n\r\nYou do not need to pass `auth_token` in the array, it will be \r\nautomatically appended.\r\n\r\n\r\n### getSearch\r\n\r\n```php\r\nmixed getSearch( string $query [, int $page, int $per_page] )\r\n```\r\n\r\nReturns a search result object. Number of results per page is \r\nlimited to 300 by default.\r\n\r\nNote that currently Quandl does not support CSV response for this \r\nnode so if `$quandl->format` is \"csv\", this call will return a JSON\r\nstring instead.\r\n\r\n\r\n### getList\r\n\r\n```php\r\nmixed getList( string $source [, int $page, int $per_page] )\r\n```\r\n\r\nReturns a list of symbols in a given source. Number of results per page is limited to 300 by default.\r\n\r\n\r\nTests\r\n-----\r\n\r\nFrom the project directory, tests can be ran using:\r\n\r\n```sh    \r\n./vendor/bin/phpunit\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}